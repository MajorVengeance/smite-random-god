name: Manual Deploy
on:
  workflow_dispatch:
    branches:
      - master
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Setup node
    - name: Set up Nodejs
      uses: actions/setup-node@v1
      with:
        node-version: '12'
    
    # Clean the dist folder before going on
    - name: Clean dist
      run: |
        if [[ ! -e dist ]]; then
          mkdir dist
        else 
          rm -r dist/*
        fi
    # Run npm install
    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm test
    - name: Variableâ€¯Substitution
      uses: microsoft/variable-substitution@v1
      with:
        files: 'dist/config.json'
      env:
        token: ${{ secrets.TOKEN }}
    - name: Tar Files
      run: tar -cvf dist.tar dist
    - name: Upload Bundle
      uses: actions/upload-artifact@master
      with:
        name: deploy_artifact # Upload artifact with name `dist`
        path: dist.tar # Upload content of `dist` folder
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Download bundle
      uses: actions/download-artifact@master
      with:
        name: deploy_artifact
        path: dist.tar
    - name: Upload via FTP
      uses: MajorVengeance/Ftp-Deploy-Action@v0.2.3-alpha
      with:
        ftp_host: ${{ secrets.FTP_HOST }}
        ftp_port: ${{ secrets.FTP_PORT }}
        ftp_username: ${{ secrets.FTP_USER }}
        ftp_password: ${{ secrets.FTP_PASSWORD }}
        local_source_dir: 'dist.tar'
        dist_target_dir: ${{ secrets.FTP_Target }}
        delete: true
